stages:
  - virtual-env
  - testing
  - linting
  - documentation
  - evaluation

image: conda/miniconda3

before_script:
    # Apparently envs in Gitlab runners have to be activated like this
    # See https://stackoverflow.com/questions/57754356/activating-conda-environment-during-gitlab-ci
    - source activate ./venv

# Set up venv on default runner
# Only (re-)create env when the definition has changed or
# when no cached version is available.
virtual-env-default-build:
  stage: virtual-env
  before_script: []
  script:
    - if ! test -e "venv"; then conda env create --force --prefix ./venv -f environment.yml; fi
  cache:
    key: venv-cache-default
    paths:
      - venv/
  rules:
    - changes:
      - environment.yml
      - .gitlab-ci.yml
      when: never
    - when: always
  artifacts:
    paths:
      - venv/
    expire_in: 1 hour

# Set up venv on default runner
# Only (re-)create env when the definition has changed or
# when no cached version is available.
virtual-env-default-rebuild:
  stage: virtual-env
  before_script: []
  script:
    - conda env create --force --prefix ./venv -f environment.yml
  cache:
    key: venv-cache-default
    paths:
      - venv/
  rules:
    - changes:
      - environment.yml
      - .gitlab-ci.yml
  artifacts:
    paths:
      - venv/
    expire_in: 1 hour

# Set up venv on default runner
# Only (re-)create env when the definition has changed or
# when no cached version is available.
virtual-env-ryzen-build:
  stage: virtual-env
  tags:
    - ryzen
  before_script: []
  script:
    - if ! test -e "venv"; then conda env create --force --prefix ./venv -f environment.yml; fi
  cache:
    key: venv-cache-default
    paths:
      - venv/
  rules:
    - changes:
      - environment.yml
      - .gitlab-ci.yml
      when: never
    - when: always
  artifacts:
    paths:
      - venv/
    expire_in: 1 hour

# Set up venv on default runner
# Only (re-)create env when the definition has changed or
# when no cached version is available.
virtual-env-ryzen-rebuild:
  stage: virtual-env
  tags:
    - ryzen
  before_script: []
  script:
    - conda env create --force --prefix ./venv -f environment.yml
  cache:
    key: venv-cache-default
    paths:
      - venv/
  rules:
    - changes:
      - environment.yml
      - .gitlab-ci.yml
  artifacts:
    paths:
      - venv/
    expire_in: 1 hour


clean-code:
  stage: linting
  dependencies: 
    - virtual-env-default-rebuild
    - virtual-env-default-build
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /.*--no-lint.*/'
      when: never
  script:
    - pylint agent_code/koetherminator
    - flake8 agent_code/koetherminator
    # Please add all directories you make changes to 

# Ordinary unit-tests. Will be run within our game setup. 
unit-test:
  stage: testing
  dependencies: 
    - virtual-env-default-rebuild
    - virtual-env-default-build
  script:
    - python -m  unittest discover -s tests

# Test that validate timing and are hardware dependent.
# Will be executed on AMD Ryzen™ 7 PRO 3700.
speed-test:
  stage: testing
  tags:
    - ryzen
  dependencies: 
    - virtual-env-ryzen-rebuild
    - virtual-env-ryzen-build
  script:
    - python -m  unittest discover -s timed_tests

# Tests that validate compatibility with tournament setup.
# Will be exectuted in unaltered version of the game setup.
integration-test:
  stage: testing
  dependencies: 
    - virtual-env-default-rebuild
    - virtual-env-default-build
  script:
    - git clone https://github.com/ukoethe/bomberman_rl.git
    - cp -a agent_code/koetherminator/. bomberman_rl/agent_code/koetherminator/
    - cp -a integration_tests/. bomberman_rl/integration_tests/

    # clean up just in case
    - find . ! \( -path './bomberman_rl*' -or -path './venv*' \) -delete

    - cd bomberman_rl
    - python -m  unittest discover -s integration_tests

# Generates docs (Master branch only)
# TODO
.documentation:
  stage: documentation
  dependencies: 
    - virtual-env-default-rebuild
    - virtual-env-default-build
  script:
    - 
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  artifacts:
    paths:
      - build/

# Evaluates the performance of the agent (Master branch only)
# Will be executed on AMD Ryzen™ 7 PRO 3700.
evaluation:
  stage: evaluation
  tags:
    - ryzen
  dependencies: 
    - virtual-env-ryzen-rebuild
    - virtual-env-ryzen-build
  script:
    - python evaluate.py
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  artifacts:
    paths:
      - results/  
